name: Automated Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  ai-code-review:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          **/*.java
          **/*.js
          **/*.ts
          **/*.py
          **/*.go
          **/*.rs
    
    - name: Set up JDK 21
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Trigger AI Code Review
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        # Avvia il servizio di review
        java -jar target/ai-code-review-1.0.0.jar &
        sleep 30
        
        # Crea PR nel sistema
        PR_RESPONSE=$(curl -X POST http://localhost:8080/api/reviews/pull-requests \
          -H "Content-Type: application/json" \
          -d '{
            "title": "${{ github.event.pull_request.title }}",
            "description": "${{ github.event.pull_request.body }}",
            "author": "${{ github.event.pull_request.user.login }}",
            "repositoryUrl": "${{ github.repository }}",
            "sourceBranch": "${{ github.event.pull_request.head.ref }}",
            "targetBranch": "${{ github.event.pull_request.base.ref }}"
          }')
        
        PR_ID=$(echo $PR_RESPONSE | jq -r '.id')
        
        # Trigger AI review
        curl -X POST http://localhost:8080/api/reviews/pull-requests/$PR_ID/ai-review \
          -H "Content-Type: application/json" \
          -d '["${{ steps.changed-files.outputs.all_changed_files }}"]'
      env:
        MCP_ENDPOINT: ${{ secrets.MCP_ENDPOINT }}
        MCP_API_KEY: ${{ secrets.MCP_API_KEY }}

  checkstyle:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Run Checkstyle
      run: mvn checkstyle:check
      env:
        MAVEN_OPTS: '--enable-preview'
    
    - name: Upload Checkstyle results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: target/checkstyle-result.xml

  spotbugs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Run SpotBugs
      run: mvn compile spotbugs:check
      env:
        MAVEN_OPTS: '--enable-preview'
    
    - name: Upload SpotBugs results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: target/spotbugsXml.xml

  pmd:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Run PMD with custom rules
      run: mvn pmd:check
      env:
        MAVEN_OPTS: '--enable-preview'
    
    - name: Upload PMD results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: target/pmd.xml

  architecture-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Run Architecture Tests
      run: mvn test -Dtest="*Architecture*Test"
      env:
        MAVEN_OPTS: '--enable-preview'
    
    - name: Generate Architecture Report
      run: |
        echo "## Architecture Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "✅ Layered Architecture compliance verified" >> $GITHUB_STEP_SUMMARY
        echo "✅ SOLID principles validated" >> $GITHUB_STEP_SUMMARY
        echo "✅ Naming conventions checked" >> $GITHUB_STEP_SUMMARY
        echo "✅ DDD patterns verified" >> $GITHUB_STEP_SUMMARY